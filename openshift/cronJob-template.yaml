apiVersion: v1
kind: Template
metadata:
  name: unresolved-package-handler-cronjob
  annotations:
    description: "Thoth: Unresolved Package Handler"
    openshift.io/display-name: "Thoth: Unresolved Package Handler"
    version: 0.1.0
    tags: thoth,ai-stacks,aistacks,unresolved-package-handler
    template.openshift.io/documentation-url: https://github.com/Thoth-Station/
    template.openshift.io/long-description: >
      This template defines resources needed to deploy Thoth Unresolved
      Package Handler to OpenShift.
    template.openshift.io/provider-display-name: "Red Hat, Inc."
    thoth-station.ninja/template-version: 0.1.0 
  labels:
    template: unresolved-package-handler-cronjob
    app: thoth
    component: unresolved-package-handler

parameters:
  - description: Registry the ImageStream to be used
    displayName: ImageStream Registry
    required: true
    name: IMAGE_STREAM_REGISTRY
    value: "docker-registry.default.svc:5000"

  - displayName: Suspend CronJob run
    description: Suspend CronJob run
    required: true
    name: THOTH_SUSPEND_JOB
    value: "true"

  - description: Project the ImageStream to be use lives in
    displayName: ImageStream Project
    required: true
    name: IMAGE_STREAM_NAMESPACE
    # TODO adjust ansible role so that we dont need a default here
    value: "thoth-infra-stage"

  - description: Tag of the ImageStream to be use
    displayName: ImageStream Tag
    required: true
    name: IMAGE_STREAM_TAG
    value: "latest"

  - description: Subcommand to be run
    displayName: Subcommand
    required: true
    name: SUBCOMMAND
    value: "producer"

objects:
  - kind: CronJob
    apiVersion: batch/v1beta1
    metadata:
      name: unresolved-package-handler
      annotations:
        thoth-station.ninja/template-version: 0.1.0
      labels:
        app: thoth
        component: unresolved-package-handler
    spec:
      schedule: "0 */12 * * *"
      suspend: ${{THOTH_SUSPEND_JOB}}
      concurrencyPolicy: Forbid
      successfulJobsHistoryLimit: 2
      startingDeadlineSeconds: null
      failedJobsHistoryLimit: 4
      jobTemplate:
        spec:
          template:
            metadata:
              labels:
                app: thoth
                component: unresolved-package-handler
            spec:
              containers:
                - image: "${IMAGE_STREAM_REGISTRY}/${IMAGE_STREAM_NAMESPACE}/unresolved-package-handler:${IMAGE_STREAM_TAG}"
                  name: unresolved-package-handler
                  env:
                    - name: SUBCOMMAND
                      value: ${{SUBCOMMAND}}
                    - name: APP_SCRIPT
                      value: "app.sh"
                    - name: KAFKA_BOOTSTRAP_SERVERS
                      value: "stage-kafka-bootstrap-dh-stage-message-bus.cloud.paas.stage.psi.redhat.com:443"
                    - name: KAFKA_CAFILE
                      value: "/mnt/secrets/kafka_ca.crt"
                    - name: KAFKA_TOPIC_RETENTION_TIME_SECONDS
                      value: 60*60*24
                    - name: THOTH_DEPLOYMENT_NAME
                      valueFrom:
                        configMapKeyRef:
                          key: storage-bucket-name
                          name: thoth
                    - name: KNOWLEDGE_GRAPH_HOST
                      valueFrom:
                        configMapKeyRef:
                          key: postgresql-host
                          name: thoth
                    - name: KNOWLEDGE_GRAPH_PORT
                      value: "5432"
                    - name: KNOWLEDGE_GRAPH_SSL_DISABLED
                      value: "1"
                    - name: KNOWLEDGE_GRAPH_USER
                      valueFrom:
                        secretKeyRef:
                          name: postgresql
                          key: database-user
                    - name: KNOWLEDGE_GRAPH_PASSWORD
                      valueFrom:
                        secretKeyRef:
                          name: postgresql
                          key: database-password
                    - name: KNOWLEDGE_GRAPH_DATABASE
                      valueFrom:
                        secretKeyRef:
                          name: postgresql
                          key: database-name
                  volumeMounts:
                    - name: secrets
                      mountPath: /mnt/secrets
                      readOnly: true
                  resources:
                    requests:
                      memory: "256Mi"
                      cpu: "500m"
                    limits:
                      memory: "512Mi"
                      cpu: "500m"
                  livenessProbe:
                    failureThreshold: 1
                    # Give this job 2 hours to finish
                    initialDelaySeconds: 7200
                    periodSeconds: 10
                    tcpSocket:
                      port: 80
              volumes:
                - name: secrets
                  secret:
                    secretName: "kafka-secret"
                    items:
                      - key: kafka_ca.crt
                        path: kafka_ca.crt
              restartPolicy: OnFailure
